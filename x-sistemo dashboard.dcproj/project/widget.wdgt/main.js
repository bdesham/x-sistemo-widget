/* 
 This file was generated by Dashcode.  
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */

//
// Function: load()
// Called by HTML body element's onload event when the widget is ready to start
//
function load()
{
    dashcode.setupParts();
}

//
// Function: remove()
// Called when the widget has been removed from the Dashboard
//
function remove()
{
    // Stop any timers to prevent CPU usage
    // Remove any preferences as needed
    // widget.setPreferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
}

//
// Function: hide()
// Called when the widget has been hidden
//
function hide()
{
    // Stop any timers to prevent CPU usage
}

//
// Function: show()
// Called when the widget has been shown
//
function show()
{
    // Restart any timers that were stopped on hide
}

//
// Function: sync()
// Called when the widget has been synchronized with .Mac
//
function sync()
{
    // Retrieve any preference values that you need to be synchronized here
    // Use this for an instance key's value:
    // instancePreferenceValue = widget.preferenceForKey(null, dashcode.createInstancePreferenceKey("your-key"));
    //
    // Or this for global key's value:
    // globalPreferenceValue = widget.preferenceForKey(null, "your-key");
}

//
// Function: showBack(event)
// Called when the info button is clicked to show the back of the widget
//
// event: onClick event from the info button
//
function showBack(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToBack");
    }

    front.style.display = "none";
    back.style.display = "block";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

//
// Function: showFront(event)
// Called when the done button is clicked from the back of the widget
//
// event: onClick event from the done button
//
function showFront(event)
{
    var front = document.getElementById("front");
    var back = document.getElementById("back");

    if (window.widget) {
        widget.prepareForTransition("ToFront");
    }

    front.style.display="block";
    back.style.display="none";

    if (window.widget) {
        setTimeout('widget.performTransition();', 0);
    }
}

if (window.widget) {
    widget.onremove = remove;
    widget.onhide = hide;
    widget.onshow = show;
    widget.onsync = sync;
}


function unikodoClickHandler(event)
{
    var text = document.getElementById('the_text').value;
    
	text = text.replace(/c[Xx]([^Xx]|$)/g, "ĉ$1");
	text = text.replace(/g[Xx]([^Xx]|$)/g, "ĝ$1");
	text = text.replace(/h[Xx]([^Xx]|$)/g, "ĥ$1");
	text = text.replace(/j[Xx]([^Xx]|$)/g, "ĵ$1");
	text = text.replace(/s[Xx]([^Xx]|$)/g, "ŝ$1");
	text = text.replace(/u[Xx]([^Xx]|$)/g, "ŭ$1");
	
	text = text.replace(/C[Xx]([^Xx]|$)/g, "Ĉ$1");
	text = text.replace(/G[Xx]([^Xx]|$)/g, "Ĝ$1");
	text = text.replace(/H[Xx]([^Xx]|$)/g, "Ĥ$1");
	text = text.replace(/J[Xx]([^Xx]|$)/g, "Ĵ$1");
	text = text.replace(/S[Xx]([^Xx]|$)/g, "Ŝ$1");
	text = text.replace(/U[Xx]([^Xx]|$)/g, "Ŭ$1");
	
	text = text.replace("xx", "x");
    
    document.getElementById('the_text').value = text;
    
    return;
}


function xsistemoClickHandler(event)
{
    var text = document.getElementById('the_text').value;
    
//    text = text.replace("x", "xx");
    
	text = text.replace(/ĉ/g, "cx");
	text = text.replace(/ĝ/g, "gx");
	text = text.replace(/ĥ/g, "hx");
	text = text.replace(/ĵ/g, "jx");
	text = text.replace(/ŝ/g, "sx");
	text = text.replace(/ŭ/g, "ux");
	
	text = text.replace(/Ĉ/g, "Cx");
	text = text.replace(/Ĝ/g, "Gx");
	text = text.replace(/Ĥ/g, "Hx");
	text = text.replace(/Ĵ/g, "Jx");
	text = text.replace(/Ŝ/g, "Sx");
	text = text.replace(/Ŭ/g, "Ux");
	    
    document.getElementById('the_text').value = text;
    
    return;
}
